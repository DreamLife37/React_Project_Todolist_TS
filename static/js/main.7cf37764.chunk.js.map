{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/errorUtils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","window","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","rejected","match","setFieldError","field","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cf37764.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4df4176d-a901-401a-823f-86f4c8f72b8c'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.login(param)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch\r\n            (err) {\r\n            const error = err as AxiosError\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n        }\r\n    }\r\n)\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}));\r\n    }\r\n    return\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('/todolists/fetchTodolists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {todolists: res.data}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('/todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n//изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsAPI.deleteTodolist(todolistId)\r\n    try {\r\n        //скажем глобально приложению, что асинхронная операция завершена\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {id: todolistId}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('/todolists/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('/todolists/changeTodolistTitle', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n    return {id: param.id, title: param.title}\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC,\r\n} = slice.actions\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/errorUtils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from \"./todolists-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {tasks, todolistId}\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\n\r\nexport const addTaskTC = createAsyncThunk('/tasks/addTask',\r\n    async (param: { title: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return task\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch\r\n            (err) {\r\n            const error = err as AxiosError\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const updateTaskTC = createAsyncThunk('/tasks/updateTask',\r\n    async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string },\r\n           {getState, dispatch, rejectWithValue}) => {\r\n        const state = getState() as AppRootStateType\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...param.domainModel\r\n        }\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            const error = err as AxiosError\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: { id: string | number }) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state,\r\n                                              action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            }\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state,\r\n                                                 action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, domainModel: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, domainModel: {title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            }\r\n            // else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            //     errors.email = 'Invalid email address';\r\n            // }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Min password 3 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            debugger\r\n\r\n            //formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null}\r\n\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox/>}\r\n                                          {...formik.getFieldProps('rememberMe')}/>\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {BrowserRouter, HashRouter, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        debugger\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color={'inherit'} onClick={logoutHandler}> Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path='/login' element={<Login/>}/>\r\n                        {/*<Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>*/}\r\n                        {/*<Route path='*' element={<Navigate to={'/404'}/>}/>*/}\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}